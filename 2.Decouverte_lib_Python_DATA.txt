### Découverte de la librairie Python pour les Data science


Tableau NumPy:
	pour augmenter la vitesse de calcul, au lieu de simplement créer une array classique on crée
	une array NumPy qui sera composé d'un même type

	import bumpy as np

	revenus = [1800, 1500, 2200, 3000, 2172]
	revenus_array = np.array(revenus)
	revenus_array
	# array([1800, 1500, 2200, 3000, 2172])

	#on peut utiliser les fonction NumPy pour utiliser des méthodes 

	np.zeros(n) #array rempli de 0
	np.ones(n) #array rempli de 1
	np.arrange(i, j, p) #array avec un séquence linéaire de i à j par pas de p

	revenus_array.dtype # -> dtype('int32') donne le type de l'array

Accéder à l'index du tableau:
	pour accéder à un ensemble d'élément du tableau contigus on suit la syntaxe qui suit

	nom_array[i:j:p]
	i indice du début
	j indice de fin
	p pas

	revenus_array[0:3] # -> de l'indice 0 (premier élément) à l'indice 2 (3eme élément)

	# Les 3 premiers éléments
	print(revenus_array[:3])

	# Les éléments à partir de l’indice 2
	print(revenus_array[2:])
	
	# Un élément sur deux
	print(revenus_array[::2])
	
	# inverse le tableau
	revenus_array[::-1]

Accéder à plusieurs éléments selon une condition:
	
	revenus_array[revenus_array > 2000]
	# -> array([2200, 3000, 2172])	

	revenus_array[(revenus_array > 2000) & (revenus_array < 3000)]
	# array([2200, 2172])

Différentes méthodes de NumPy:
	
	revenus_array.shape
	# (5,) on a array contenant 5 éléments

	# calculer la moyenne
	revenus_array.mean()

	# calculer le maximum (ou le minimum) :
	revenus_array.max()
	revenus_array.min()

	# accéder à l’indice de l’élement minimum (ou maximum) :
	revenus_array.argmin()
	revenus_array.argmax()

	# ordonner par ordre croissant :
	revenus_array.sort()
	print(revenus_array)

	# calculer la somme :
	revenus_array.sum()

Exercice d'exemple:

	import numpy as np

	liste = [1800, 1500, 2200, 3000, 2172, 5000, 1400, 1200, 1100, 1300]	
	revenus = np.array(liste)
	display(revenus)

	#On sélectionne les revenues supérieur ou égal à 3000€
	haut_revenus = revenus[revenus>=3_000] #on peut séparer les millier par un underscore
	display(haut_revenus)

	#On calcule la somme
	somme_sum = revenus.sum()

	# On multiplie par 12 
	somme = somme_sum * 12

	#Il est possible de faire les 2 opérations en une ligne 
	somme = revenus.sum() * 12
	print("La somme des revenus annuelle est :", somme, "€")

	#On fait la moyenne 
	moyenne = revenus.mean()
	print("La moyenne des revenus mensuelle est :", moyenne, "€")

	#On modifie une valeur de notre array
	print("Array avant :", revenus)

	revenus[revenus == 1400] = 1600
	print("Array après :", revenus)

Tableau multidimensionnel:

	#un tableau de 3 lignes et deux colonnes
	tab1 = np.array([[1, 2], [3, 4], [5, 6]]

	# un tableau de 3 lignes, 5 colonnes rempli de 1
	np.ones((3, 5))

	# un tableau de 4 lignes et de 4 colonnes contenant que des 0
	np.zeros((4, 4))

	# un tableau de 6 lignes, 3 colonnes rempli de valeurs aléatoires comprises entre 0 et 1
	np.random.random((6, 3))

	# un tableau de 3 lignes, 3 colonnes rempli de valeurs aléatoires entières entre 1 et 10
	np.random.randint(1, 10, size=(3, 3))


Calcul matriciel:
	
	A = np.array([[1, 2], [3, 4]])
	B = np.array([[5, 10], [15, 20]])

	print(A+B) # -> [[6, 12], [18, 24]]

Accéder aux éléments d'un tableau multidimensionnel:
	
	import numpy

	tableau = 
		[[1300, 400, 23], 
		 [1700, 560, 24],
		 [2500, 900, 30],
		 [3000, 1000, 22]
		]
	
	#On commence par faire notre tableau NumPy
	data = np.array(tableau)

	#On peut sélectionner des éléments du tableau 
	data[ligne, colonne]

	#On peut sélectionner un élément spécifique du tableau
	data[0, 0] # -> 1300

	#On peut sélectionner une ligne entière
	data[0, :] # -> array([1300, 400, 23])

	#On peut sélectionner toute une colonne
	data([:, 2]) # -> array([23, 24, 30, 22])

	#On peut conditionner notre sélection
	data[data[:, 2] <= 25] # on veut toute les lignes dont la dernière colonne est inférieur a 25
	# - > array([1300, 400, 23], [1700, 560, 24])

	#On peut ajouter un élément dans un tableau multidimensionnel
	fred = [1750, 700, 27]
	np.vstack((data, fred))
	# -> array([1300, 400, 23], 
		 [1700, 560, 24],
		 [2500, 900, 30],
		 [3000, 1000, 22],
		 [1750, 400, 23]
		)

Exercice d'exemple:
	
	import numpy as np
	
	hugo = [1800, 21, 0]
	richard = [1500, 54, 2]
	emilie = [2200, 28, 3]
	pierre = [3000, 37, 1]
	paul = [2172, 37, 2]
	deborah = [5000, 32, 0]
	yohann = [1400, 23, 0]
	anne = [1200, 25, 1]
	thibault = [1100, 19, 0]
	emmanuel = [1300, 31, 2]

	tableau = [hugo, richard, emilie, pierre, paul, deborah,yohann, anne, thibault, emmanuel]
	
	#On crée une array
	data = np.array(tableau)

	print("Informations de Paul :")
	print(data[4, :])
	print("-")
	#on calcul son salaire fois le taux d'endettement maximum de 35% arrondi à deux chiffres
	print("Ses mensualités maximales sont de :", round(data[4,0]*0.35, 2), "€")

	#Informations de Paul :
	#[2172   37    2]
	#-
	#Ses mensualités maximales sont de : 760.2 €

	#on ajoute une autre donnée
	louise = [1900, 31, 1]
	data = np.vstack((data, louise))

######################################################################################

Créer un Data frame avec Pandas:
	#on commence par importer la librairie
	import pandas as pd
	import numpy as np

	#on utilise une fonction de pandas pour importer le fichier CSV qu'on stocke dans une variable
	data_csv = pd.read.csv('nomDuFichier.csv')

	#si le fichier est un JSOn
	data_json - pd.read.json('nomDuFichier.json')

	#si le fichier est un excel
	data_excel - pd.read.excel('nomDuFichier.xlsx')

	#méthode qui permet de lire les 5 premières lignes
	data_csv.head()

	#méthode qui permet de lire les 5 dernières lignes
	data_csv.tail() #possible donner un argument pour le nombre de ligne

	#pour connaitre le nombre de ligne et de colonne
	data_csv.shape

	#pour connaitre le type de chaque colonne
	data_csv.dtypes

	#On peut crée une array
	data = np.array(data_csv)

	#on accède à une ou plusieurs colonnes de notre data frame
	data_csv['email'] #lorsqu'on a une colonne -> type series (attention utilisation méthode)
	data_csv['nom', 'email'] #lorsqu'on a plusieurs colonne -> type data frame

	#modification de colonne
	data_csv['nom'] = 1 #remplace toute la colonne par des 1

	#création de colonne
	client['id'] = 1000 #on crée la colonne en lui donnant un nom et une valeur

	#suppression de colonne 
	data_csv = data_csv.drop(columns='id') #on supprime en citant la colonne et en réaffectant
	del data_csv['id'] #identique mais pas de réaffectation 
	data_csv.pop('id) #identique pas de réaffectation 

	#renommer une colonne
	data_csv = data_csv.rename(columns={'oldName' : 'newName'}) #on réaffecte
	data_csv.rename(columns={'oldName' : 'newName', 'oldName2', 'newName'}) #plusieurs colonnes
	data_csv.rename(columns={'oldName' : 'newName'}, inplace=True) #autre réaffectation

	#changer le type d'une colonne
	data_csv['identifiant'].astype(float)

	# trier selon une colonne, par ordre croissant :
	data_csv.sort_values('colonne')

	#trier selon une colonne par ordre décroissant :
	data_csv.sort_values('colonne', ascending = False)

Filtrer les données du data frame:
	
	#sélection par indice
	mon_dataframe.iloc[indice_ligne, indice_colonne]
	data_csv.iloc[0, 2]

	#sélectionner le nom des 10 premieres lignes de la 3eme colonne
	data_csv.iloc[:10, 2]

	#sélectionner toutes les colonnes des 10 premieres lignes
	data_csv.iloc[:10, :]

	#sélectionner la 2eme à la 3eme colonne incluse des 11 à 20 lignes 
	data_csv.iloc[10:20, 1:3]

	#sélectionner la 2eme et 4eme colonne des 10 dernières lignes :
	data_csv.iloc[-10:, [1, 3]]

Filtrer avec condition:
	
	import pandas as pd

	data = pd.read_csv('prets.csv')
	
	#on filtre dans une colonne en n'affichant que les données qui comportent le mot automobile
	#attention pas de i devant loc, les 2 points servent à afficher tous le tableau pour automobile
	data.loc[data['nomColonne'] == 'automobile', :]

	#on peut afficher une seule ou plusieurs colonne par rapport au filtre d'une colonne
	data.loc[data['nomColonne'] == 'automobile', 'nomColonne']
	data.loc[data['nomColonne1'] == 'automobile', ['nomColonne2', 'nomColonne3']]

	#filtre sur un nombre
	data.loc[data['nomColonne'] > 1000, :]

	#plusieurs conditions
	data.loc[(data['nomColonne1'] == 'automobile') & (data[nomColonne2] < 1000), :] #ET
	data.loc[(data['nomColonne1'] == 'automobile') | (data[nomColonne2] < 1000), :] #OU

	display(data.loc[0:10, :]) #sélection par index du 1er au 9eme index 
	display(data.iloc[0:10, :]) #sélection par ligne de la 1ere à la 9eme ligne

	#création d’un data frame trié pour ‘désordonner’ les Index
	df_temp = clients.sort_values('nom')
	display(df_temp)

	#reset_index
	display(df_temp.reset_index())

	#reset_index sans garder les anciens Index
	display(df_temp.reset_index(drop=True))

Modification spécifique de données:

	import pandas as pd

	data = pd.read_csv('fichier.csv')
	
	data.iloc[:3, 7] #on sélectionne les 3 première lignes de la 8ème colonne
	data.iloc[:3, 7] = 10 #on affecte une nouvelle valeur à ces lignes

	#on modifie une colonne avec une condition
	data.loc[data['colonne'] == 'condition', 'colonneAmodifier] = 10

	#pour modifier une colonne par elle même on utilise un mask
	mask = data['colonne'] == 'condition'
	data.loc[mask, 'colonneAmodifier'] = data.loc[mask, 'colonneAmodifier'] + 10

	#somme sur une colonne par rapport à une condition
	data.loc[data['colonne'] == 'condition', 'colonneAcalculer].sum()
	
Agrégation:
	
	col1	col2
0	a	3
1	b	4
2	b	10
3	a	7
4	b	6

	#on veut faire la moyenne de col2 par rapport à a et b
	data.groupby('col1').mean() # -> a = 5 b = 6.6666

	#on peut faire la somme d'une colonne ET d'une autre colonne, les colonnes servent de filtre
	data.groupby(['colonne1', 'colonne2']).sum()

	#on peut avoir la somme en précisant la colonne
	data.groupby(['colonne1', 'colonne2'])['colonne3'].sum()

	#on peut passer les filtres en colonne au lieu d'être en ligne
	data.pivot_table(index='filtre_global', columns='différent_filtre', values='colonneOpération,
 		aggfunc='sum')
	
	#on peut passer les filtres de colonne en ligne, on transforme plusieurs colonne en une
	data.melt(id_vars='filtre_principal', value_vars=['colonne1', 'colonne2'])


Fusionner des dataframes:
	
	
	import pandas as pd

	#jointure entre 2 dataframes A et B, on indique la clé identique entre les deux
	pd.merge(A, B, on='id')
	
	#jointure entre 2 dataframes A et B n'ayant pas le même nom de colonne mais meme type de clé
	pd.merge(A, B, left_on='id', right_on='identifiant')

	#différent type de jointure 
	pd.merge(A, B, on='id', how='inner') # les données qui ne match pas son supprimé 

	#jointure qui conserve les données A si pas de match entre les deux
	pd.merge(A, B, on='id', how='left')
	
	#jointure qui conserve les données B si pas de match entre les deux
	pd.merge(A, B, on='id', how='right')


	#jointure qui conserve quand même les données A et B si pas de match entre les deux
	pd.merge(A, B, on='id', how='outer')


Concaténation de dataFrames: 

	#un dataframes qui s'ajoute au précédent, les données s'agrège à la suite de l'autre
	liste_concat = [dataframes1, dataframes2]
	pd.concat(liste_concat, ignore_index=True) #on ajoute ignore_index qui reset l'index si besoin


Représentation graphique d'un dataframes:

	#avec la librairie matplotlib on peut représenter graphiquement
	import matplotlib.pyplot as plt

	plt.scatter() #nuage de points 
	plt.plot() #diagrammes en lignes ou en courbes
	plt.bar() #diagramme en barres
	plt.hist() #histogrammes
	plt.pie() #diagrammes circulaires

	#argument à donner et personnalisation pour un nuage de point
	plt.scatter(data['colonne1'], data['colonne2']
			s=60, alpha=0.5, c='red', marker='P')

	#argument à donner et personnalisation pour un camembert
	data = data.groupby('filtre1')['filtre2'].sum()
	data = data.reset_index()
	plt.pie(x=data['colonne1'], labels=data['colonne2'])

	#argument à donner et personnalisation pour un barchart
	plt.bar(height=data['colonne1'], x=data['colonne2'])

	#argument à donner et personnalisation pour un histogramme 
	plt.hist(data['colonne1'])

	#argument à donner et personnalisation pour une courbe
	plt.plot(data['colonne1'], data['colonne2', marker='o', linestyle='--', color='red'])

	#affichage graphique des dataframes
	plt.show()

	#Personnaliser le graphique
	plt.title("Je suis un titre", fontname='Arial', fontsize=16)
	plt.xlabel('titre abscisse', color='red', fontweight='bold')
	plt.ylabel('titre ordonné')
	plt.figure(figsize=(10, 6)) #taille de la fenêtre graphique
	plt.grid(axis='y') #appliquer un grillage sur le graphique avec ou sans argument
	plt.ylim(0, 1000) #appliquer une échelle 
	plt.yticks([0, 250, 500, 750, 1000]) #espacement entre les graduation

Utilisation de Seaborn, surcouche de Matplotlib :

	#on importe la librairie
	import seaborn as sns

	sns.scatterplot(data=data_frame, x='colonne1', y='colonne2', hue='colonne_affiché')
	
	#défini pour tous les graphique la taille de la police
	plt.rcParams.update({'font.size': 14})

	#mettre la légende en dehors du graphique
	plt.legend(bbox_to_anchor=(1, 1.02))

	#agréger directement les données dans le graphique
	#ci pour confidence interval, estimator pour la fonction d'agrégation
	sns.barplot(data=data_frame, x='colonne1', y='colonne2', ci=None, estimator=sum,
			 hue='colonne_affiché')

	#différente méthode
	sns.lineplot() #courbe
	sns.boxplot() #boite à moustache
	sns.histplot() #histogramme
	sns.kdeplot() #graphique à densité
	sns.pairplot() #ensemble des variables numérique deux à deux sur un seul graphique 

	#personnalisation des graphiques
	sns.set_palette('pastel') #modification de la couleur
	sns.set_theme(style='whitegrid', palette='pastel) #modification du fond du graphique


